// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/kl09/auth-go"
	"sync"
)

var (
	lockCredentialRepositoryMockByEmail sync.RWMutex
	lockCredentialRepositoryMockByID    sync.RWMutex
	lockCredentialRepositoryMockByToken sync.RWMutex
	lockCredentialRepositoryMockCreate  sync.RWMutex
)

// Ensure, that CredentialRepositoryMock does implement auth.CredentialRepository.
// If this is not the case, regenerate this file with moq.
var _ auth.CredentialRepository = &CredentialRepositoryMock{}

// CredentialRepositoryMock is a mock implementation of auth.CredentialRepository.
//
//     func TestSomethingThatUsesCredentialRepository(t *testing.T) {
//
//         // make and configure a mocked auth.CredentialRepository
//         mockedCredentialRepository := &CredentialRepositoryMock{
//             ByEmailFunc: func(ctx context.Context, email string) (auth.Credential, error) {
// 	               panic("mock out the ByEmail method")
//             },
//             ByIDFunc: func(ctx context.Context, id int) (auth.Credential, error) {
// 	               panic("mock out the ByID method")
//             },
//             ByTokenFunc: func(ctx context.Context, token string) (auth.Credential, error) {
// 	               panic("mock out the ByToken method")
//             },
//             CreateFunc: func(ctx context.Context, c *auth.Credential) error {
// 	               panic("mock out the Create method")
//             },
//         }
//
//         // use mockedCredentialRepository in code that requires auth.CredentialRepository
//         // and then make assertions.
//
//     }
type CredentialRepositoryMock struct {
	// ByEmailFunc mocks the ByEmail method.
	ByEmailFunc func(ctx context.Context, email string) (auth.Credential, error)

	// ByIDFunc mocks the ByID method.
	ByIDFunc func(ctx context.Context, id int) (auth.Credential, error)

	// ByTokenFunc mocks the ByToken method.
	ByTokenFunc func(ctx context.Context, token string) (auth.Credential, error)

	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, c *auth.Credential) error

	// calls tracks calls to the methods.
	calls struct {
		// ByEmail holds details about calls to the ByEmail method.
		ByEmail []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Email is the email argument value.
			Email string
		}
		// ByID holds details about calls to the ByID method.
		ByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int
		}
		// ByToken holds details about calls to the ByToken method.
		ByToken []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// C is the c argument value.
			C *auth.Credential
		}
	}
}

// ByEmail calls ByEmailFunc.
func (mock *CredentialRepositoryMock) ByEmail(ctx context.Context, email string) (auth.Credential, error) {
	if mock.ByEmailFunc == nil {
		panic("CredentialRepositoryMock.ByEmailFunc: method is nil but CredentialRepository.ByEmail was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Email string
	}{
		Ctx:   ctx,
		Email: email,
	}
	lockCredentialRepositoryMockByEmail.Lock()
	mock.calls.ByEmail = append(mock.calls.ByEmail, callInfo)
	lockCredentialRepositoryMockByEmail.Unlock()
	return mock.ByEmailFunc(ctx, email)
}

// ByEmailCalls gets all the calls that were made to ByEmail.
// Check the length with:
//     len(mockedCredentialRepository.ByEmailCalls())
func (mock *CredentialRepositoryMock) ByEmailCalls() []struct {
	Ctx   context.Context
	Email string
} {
	var calls []struct {
		Ctx   context.Context
		Email string
	}
	lockCredentialRepositoryMockByEmail.RLock()
	calls = mock.calls.ByEmail
	lockCredentialRepositoryMockByEmail.RUnlock()
	return calls
}

// ByID calls ByIDFunc.
func (mock *CredentialRepositoryMock) ByID(ctx context.Context, id int) (auth.Credential, error) {
	if mock.ByIDFunc == nil {
		panic("CredentialRepositoryMock.ByIDFunc: method is nil but CredentialRepository.ByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int
	}{
		Ctx: ctx,
		ID:  id,
	}
	lockCredentialRepositoryMockByID.Lock()
	mock.calls.ByID = append(mock.calls.ByID, callInfo)
	lockCredentialRepositoryMockByID.Unlock()
	return mock.ByIDFunc(ctx, id)
}

// ByIDCalls gets all the calls that were made to ByID.
// Check the length with:
//     len(mockedCredentialRepository.ByIDCalls())
func (mock *CredentialRepositoryMock) ByIDCalls() []struct {
	Ctx context.Context
	ID  int
} {
	var calls []struct {
		Ctx context.Context
		ID  int
	}
	lockCredentialRepositoryMockByID.RLock()
	calls = mock.calls.ByID
	lockCredentialRepositoryMockByID.RUnlock()
	return calls
}

// ByToken calls ByTokenFunc.
func (mock *CredentialRepositoryMock) ByToken(ctx context.Context, token string) (auth.Credential, error) {
	if mock.ByTokenFunc == nil {
		panic("CredentialRepositoryMock.ByTokenFunc: method is nil but CredentialRepository.ByToken was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Token string
	}{
		Ctx:   ctx,
		Token: token,
	}
	lockCredentialRepositoryMockByToken.Lock()
	mock.calls.ByToken = append(mock.calls.ByToken, callInfo)
	lockCredentialRepositoryMockByToken.Unlock()
	return mock.ByTokenFunc(ctx, token)
}

// ByTokenCalls gets all the calls that were made to ByToken.
// Check the length with:
//     len(mockedCredentialRepository.ByTokenCalls())
func (mock *CredentialRepositoryMock) ByTokenCalls() []struct {
	Ctx   context.Context
	Token string
} {
	var calls []struct {
		Ctx   context.Context
		Token string
	}
	lockCredentialRepositoryMockByToken.RLock()
	calls = mock.calls.ByToken
	lockCredentialRepositoryMockByToken.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *CredentialRepositoryMock) Create(ctx context.Context, c *auth.Credential) error {
	if mock.CreateFunc == nil {
		panic("CredentialRepositoryMock.CreateFunc: method is nil but CredentialRepository.Create was just called")
	}
	callInfo := struct {
		Ctx context.Context
		C   *auth.Credential
	}{
		Ctx: ctx,
		C:   c,
	}
	lockCredentialRepositoryMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockCredentialRepositoryMockCreate.Unlock()
	return mock.CreateFunc(ctx, c)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedCredentialRepository.CreateCalls())
func (mock *CredentialRepositoryMock) CreateCalls() []struct {
	Ctx context.Context
	C   *auth.Credential
} {
	var calls []struct {
		Ctx context.Context
		C   *auth.Credential
	}
	lockCredentialRepositoryMockCreate.RLock()
	calls = mock.calls.Create
	lockCredentialRepositoryMockCreate.RUnlock()
	return calls
}
